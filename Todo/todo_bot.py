import telebot
from telebot import types
import sqlite3
import os
from dotenv import load_dotenv

load_dotenv()
token = os.getenv('TOKEN')
bot = telebot.TeleBot(token)

def init_db():
    conn = sqlite3.connect('todo.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS tasks
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER,
                     task TEXT)''')
    conn.commit()
    conn.close()

init_db()

def get_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    markup.add("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "To-do Bot:\n"
        "1) –ù–∞–∂–º–∏ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'\n"
        "2) –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ \n"
        "3) –£–ø—Ä–∞–≤–ª—è–π —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏",
        reply_markup=get_keyboard()
    )

@bot.message_handler(func=lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É:")
    bot.register_next_step_handler(msg, save_task)

def save_task(message):
    try:
        conn = sqlite3.connect('todo.db')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO tasks (user_id, task) VALUES (?, ?)",
                      (message.chat.id, message.text))
        conn.commit()
        bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: '{message.text}'", reply_markup=get_keyboard())
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", reply_markup=get_keyboard())
    finally:
        conn.close()

@bot.message_handler(func=lambda msg: msg.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
def tasks_list(message): 
    try:
        conn = sqlite3.connect('todo.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, task FROM tasks WHERE user_id=?", (message.chat.id,))
        tasks = cursor.fetchall()
        
        if not tasks:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", reply_markup=get_keyboard())
        else:
            tasks_text = "\n".join([f"{i+1}. {task[1]}" for i, task in enumerate(tasks)])
            bot.send_message(message.chat.id, f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks_text}", reply_markup=get_keyboard())
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞", reply_markup=get_keyboard())
    finally:
        conn.close()

@bot.message_handler(func=lambda msg: msg.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
def delete_task(message):
    try:
        conn = sqlite3.connect('todo.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, task FROM tasks WHERE user_id=?", (message.chat.id,))
        tasks = cursor.fetchall()
        
        if not tasks:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_keyboard())
            return

        tasks_text = "\n".join([f"{i+1}. {task[1]}" for i, task in enumerate(tasks)])
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{tasks_text}")
        bot.register_next_step_handler(msg, process_task_number, tasks)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", reply_markup=get_keyboard())
    finally:
        conn.close()

def process_task_number(message, tasks):
    try:
        task_num = int(message.text)
        if 1 <= task_num <= len(tasks):
            conn = sqlite3.connect('todo.db')
            cursor = conn.cursor()
            task_id = tasks[task_num-1][0]
            cursor.execute("DELETE FROM tasks WHERE id=?", (task_id,))
            conn.commit()
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ '{tasks[task_num-1][1]}' —É–¥–∞–ª–µ–Ω–∞", reply_markup=get_keyboard())
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏", reply_markup=get_keyboard())
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏", reply_markup=get_keyboard())
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", reply_markup=get_keyboard())
    finally:
        conn.close()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.infinity_polling()
    except:
        print("–û—à–∏–±–∫–∞")